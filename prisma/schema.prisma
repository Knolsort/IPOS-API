// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "../src/generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String   @default("https://cdn-icons-png.flaticon.com/128/10446/10446694.png")
  phone     String   @unique
  sales     Sale[]
  credit    Credit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credit {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  maxCreditLimit     Float
  maxCreditDays      Int
  unpaidCreditAmount Int      @default(0)
  customerId         String   @db.ObjectId
  shopId             String   @db.ObjectId
  shop               Shop     @relation(fields: [shopId], references: [id])
  customer           Customer @relation(fields: [customerId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum ShopType {
  BAKERY
  SUPERMARKET
  MINISUPERMARKET
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  shopType  ShopType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shops     Shop[]
}

model Shop {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phone          String?      @unique
  slug           String       @unique
  logo           String       @default("https://cdn-icons-png.flaticon.com/128/10446/10446694.png")
  location       String
  latitude       Float?
  longitude      Float?
  gst            Boolean?     @default(false)
  attendantEmail String[]
  adminId        String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  products       Product[]
  sales          Sale[]
  expenses       Expense[]
  credit         Credit[]
  shopCredits    ShopCredit[]
  admin          User         @relation(fields: [adminId], references: [id])
}

model Supplier {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phone          String          @unique
  contactPerson  String?
  product        Product[]
  purchaseOrders PurchaseOrder[]
  shopCredits    ShopCredit[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String[]
  slug         String   @unique
  // gProducts    GProduct[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Brand {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String     @unique
  gproducts GProduct[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String     @unique
  image     String?
  gproducts GProduct[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model GProduct {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  otherNames  String[]  @default([])
  description String?
  image       String[]  @default(["https://cdn-icons-png.flaticon.com/128/10446/10446694.png"])
  gst         Float?
  assured     Boolean   @default(false)
  barcode     String?   @unique
  productCode String    @unique
  slug        String    @unique
  createrId   String    @default("admin")
  unitTypes   String[]
  brandId     String?   @db.ObjectId
  categoryId  String    @db.ObjectId
  brand       Brand?    @relation(fields: [brandId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  gproductId         String              @db.ObjectId
  barcode            String?
  alertQty           Int
  stockQty           Int
  price              Float
  offerPrice         Float?
  sku                String?             @unique
  supplierId         String?             @db.ObjectId
  shopSlug           String
  expiryDate         String[]
  shop               Shop                @relation(fields: [shopSlug], references: [slug])
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  gproduct           GProduct            @relation(fields: [gproductId], references: [id])
  saleItems          SaleItem[]
  adjustmentItems    AdjustmentItem[]
  purchaseOrderItems PurchaseOrderItem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

enum SaleType {
  PAID
  CREDIT
}

enum paymentMethod {
  CASH
  UPI
  SPLIT
}

model Sale {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String?       @db.ObjectId
  saleNumber      String        @unique
  saleAmount      Int
  balanceAmount   Int?          @default(0)
  cashPaidAmount  Int?          @default(0)
  upiPaidAmount   Int?          @default(0)
  saleType        SaleType      @default(PAID)
  paymentMethod   paymentMethod @default(CASH)
  transactionCode String?
  // Relationships
  shopId          String        @db.ObjectId
  shop            Shop          @relation(fields: [shopId], references: [id])
  saleItems       SaleItem[]
  customer        Customer?     @relation(fields: [customerId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SaleItem {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  saleId       String @db.ObjectId
  productId    String @db.ObjectId
  qty          Int
  productPrice Float
  productName  String
  productImage String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [id])
  sale    Sale    @relation(fields: [saleId], references: [id])
}

model Payee {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String    @unique
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ExpenseCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Expense {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  amount      Int
  description String?
  attachments String[]
  payeeId     String?         @db.ObjectId
  categoryId  String          @db.ObjectId
  shopId      String          @db.ObjectId
  payee       Payee?          @relation(fields: [payeeId], references: [id])
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  shop        Shop            @relation(fields: [shopId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum NotificationStatus {
  WARNING
  DANGER
  INFO
}

model Notification {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  status     NotificationStatus @default(WARNING)
  statusText String
  read       Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Adjustment {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  refNo  String           @unique @default("AAAAB")
  reason String
  items  AdjustmentItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdjustmentItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  adjustment   Adjustment @relation(fields: [adjustmentId], references: [id])
  adjustmentId String     @db.ObjectId
  productId    String     @db.ObjectId
  product      Product    @relation(fields: [productId], references: [id])
  quantity     Int
  type         String
  currentStock Int
  productName  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum PurchaseOrderStatus {
  PAID
  PARTIAL
  UNPAID
}

model PurchaseOrder {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  supplierId    String              @db.ObjectId
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  status        PurchaseOrderStatus @default(PAID)
  discount      Int?
  notes         String?
  tax           Int?
  refNo         String
  totalAmount   Int
  balanceAmount Int
  shippingCost  Int?
  items         PurchaseOrderItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String        @db.ObjectId
  productId       String        @db.ObjectId
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  productName     String
  unitCost        Int
  subTotal        Int
  currentStock    Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ShopCredit {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  maxCreditDays      Int?
  unpaidCreditAmount Int       @default(0)
  supplierId         String?   @db.ObjectId
  shopId             String    @db.ObjectId
  shop               Shop      @relation(fields: [shopId], references: [id])
  supplier           Supplier? @relation(fields: [supplierId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
